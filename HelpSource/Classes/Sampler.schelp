TITLE:: Sampler
summary:: A sampler synthesizer that knows what it's doing.
categories:: SuperSampler
related:: Classes/SampleDescript

DESCRIPTION::
Sampler is a sampling synthesizer that applies SampleDescript for sound quality detection, and using detected information to determine playback bahavier.  Most features of Sampler is done automatically for you.

For example, it detects the beginning of your sound samples, if there are more than one onset, it separates each onsets as different samples.  There are lots of other figures you may want to experiment.


CLASSMETHODS::

METHOD:: new
Create a new Sampler.

ARGUMENT:: name
Name of Sampler.

ARGUMENT:: dbname
Name of Sampler database.  Each database may contain different Sampler libraries.

returns:: this Sampler


INSTANCEMETHODS::


METHOD:: init
Create a new Sampler and add it to SamplerDB.

ARGUMENT:: name
Name of Sampler.

ARGUMENT:: dbname
Name of SamplerDB this Sampler belongs to.  If the name of SamplerDB is not created, it will create a new SamplerDB class.

returns:: (describe returnvalue here)



METHOD:: key
Play samples by giving key numbers.
Defaults are also provided by SamplerArguments class.

ARGUMENT:: keynums
The MIDI key numbers to play, can be a single number or an array of numbers.
Negative key numbers reverses the buffer to play.

ARGUMENT:: syncmode
The strategy to syncronize different samples:

\keeplength: keep the length of all playing sound, align all at peak point of the sample with the longest attack time.

\percussive: make a percussive sound, starts all sounds from peak point.

[\parkat, time]: the peak point of the sound will be set to the scheduled time.

\nosorting:  just play every sample as it is, like conventional sampler synthesizer.

ARGUMENT:: dur
Duration

ARGUMENT:: amp
Overall amplitude, a multiplier.

ARGUMENT:: ampenv
An Envelop for amplitude, in normalized XY format.  Each node in the Envelope is describe as a pair of time and amplitude in the array.

ARGUMENT:: pan
Overall panning.  O is the center, -1 is left and 1 is right.

ARGUMENT:: panenv
An Envelop for panning, in normalized XY format.  Each node in the Envelope is describe as a pair of time and panning in the array.

ARGUMENT:: bend
An Envelop for bending pitch in the sound in normalized XY format.  Each node in the Envelope is describe as a pair of time and pitch bending in the array.


ARGUMENT:: texture
The number of sample sounds to be played in the same time.
If nil, it will play every triggered sounds.

ARGUMENT:: expand
Stretch the played samples with insertion algorithm using granular synthesis.  The value will be the expected time to be stretched.

Granulation runs only when this value is not nil.

ARGUMENT:: grainRate
The grain rate for stratching granular synthesizer.

ARGUMENT:: grainDur
The grain duration for stratching granular synthesizer.



METHOD:: db
Return an array of Samplers in the same SamplerDB database

ARGUMENT:: name
The name of the Sampler to return.

returns:: a Sampler with the name, or a list of Samplers if not specified.


METHOD:: filenames
Get filenames loaded to this Sampler.
returns:: An array of filenames.



METHOD:: setKeyRanges
For initial use.

Reset range response to each key related to the anchor key number.

In Sampler, every loaded sound files is anchored to a MIDI key number.
When the method .key is used, a range of MIDI key numbers are determined for each sampler to respond to the key number played.

ARGUMENT:: strategy
Determine the method to arrange the responded MIDI key numbers for each sample:

\keynumRadious: Give a range radious in infoArray from each anchor keynums as responsive range.

\fullrange: Every sample is responded in full range of midi key number.

\keynumOnly: Only respond to the anchored key number.

ARGUMENT:: infoArray
Information array provided to respond to the strategy.


METHOD:: getPlaySamples
For internal use

Determine which sample to be played based on the key number being played and texture value.

ARGUMENT:: args
Arguments stored in SamplerArguments class.

ARGUMENT:: filterFunc


METHOD:: keynums
Anchor key numbers for each sample.

returns:: An array of key numbers setted as anchor for each sample in the list.


METHOD:: samples
All samples are stored here.  Samples in SuperSampler is stored as classs of SampleDescript.
You can extract sample informations stored in the class.

returns:: An array of SampleDescript classes.


METHOD:: dbs
The database storing this Sampler.  The name \default is assigned if not specified.

returns:: A SamplerDB class.


METHOD:: load
Load sound files into a Sampler. All sound files will be analyzed and stored as SampleDescript class, and load into buffers.

ARGUMENT:: soundfiles
A list of soundfiles to load.

ARGUMENT:: server
The server to load all samples into buffers.

ARGUMENT:: filenameAsKeynum
Use key numbers provided in the file names as anchored key number for each file.


METHOD:: keyRanges
Ranges of responding MIDI key numbers of each samples.

returns:: An array of MIDI key numbers indicating the upper and lower key numbers with each key ranges.  In a format like this:

|-------- Each Sample -------------| |-----Each Sample---

|----Section----|      |----Section----|            |----Section----|

[[[upper, lower], [upper, lower]..], [[upper, lower], [upper, lower]...], ....]



EXAMPLES::

code::
(some example code)
::